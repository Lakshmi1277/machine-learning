#importing libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split, cross_val_score, GridSearchCV
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.ensemble import RandomForestClassifier
from sklearn.svm import SVC
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
from sklearn.datasets import load_iris
# Load the Iris dataset
iris = load_iris()
# Create a DataFrame for easier analysis
data = pd.DataFrame(data=iris.data, columns=iris.feature_names)
data['target'] = iris.target
# View the first few rows
print(data.head())
# Checking for missing values
print(data.isnull().sum())
# Descriptive statistics
print(data.describe())
# Visualize the distribution of features
sns.pairplot(data, hue="target")
plt.show()
# Correlation matrix
corr = data.iloc[:, :-1].corr()
sns.heatmap(corr, annot=True, cmap='coolwarm')
plt.show()
# Separate features and target variable
X = data.drop(columns='target')
y = data['target']
# Split into training and test sets (80-20 split)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
# Feature scaling
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)
# Logistic Regression
log_reg = LogisticRegression(max_iter=200)
log_reg.fit(X_train_scaled, y_train)
# Support Vector Machine
svm = SVC(kernel='linear')
svm.fit(X_train_scaled, y_train)
# Random Forest
rf = RandomForestClassifier(n_estimators=100, random_state=42)
rf.fit(X_train_scaled, y_train)
# Evaluate Logistic Regression
y_pred_log_reg = log_reg.predict(X_test_scaled)
print("Logistic Regression Accuracy:", accuracy_score(y_test, y_pred_log_reg))
print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred_log_reg))
print("Classification Report:\n", classification_report(y_test, y_pred_log_reg))
# Evaluate SVM
y_pred_svm = svm.predict(X_test_scaled)
print("SVM Accuracy:", accuracy_score(y_test, y_pred_svm))
print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred_svm))
print("Classification Report:\n", classification_report(y_test, y_pred_svm))
# Evaluate Random Forest
y_pred_rf = rf.predict(X_test_scaled)
print("Random Forest Accuracy:", accuracy_score(y_test, y_pred_rf))
print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred_rf))
print("Classification Report:\n", classification_report(y_test, y_pred_rf))
# Logistic Regression Cross-Validation
cv_log_reg = cross_val_score(log_reg, X_train_scaled, y_train, cv=5)
print("Logistic Regression Cross-Validation Accuracy: ", cv_log_reg.mean())
# SVM Cross-Validation
cv_svm = cross_val_score(svm, X_train_scaled, y_train, cv=5)
print("SVM Cross-Validation Accuracy: ", cv_svm.mean())
# Random Forest Cross-Validation
cv_rf = cross_val_score(rf, X_train_scaled, y_train, cv=5)
print("Random Forest Cross-Validation Accuracy: ", cv_rf.mean())
# Hyperparameter tuning for Logistic Regression
log_reg_params = {'C': [0.1, 1, 10], 'solver': ['lbfgs', 'liblinear']}
grid_search_log_reg = GridSearchCV(LogisticRegression(max_iter=200), log_reg_params, cv=5)
grid_search_log_reg.fit(X_train_scaled, y_train)
print("Best parameters for Logistic Regression:", grid_search_log_reg.best_params_)
# Hyperparameter tuning for Random Forest
rf_params = {'n_estimators': [50, 100, 200], 'max_depth': [5, 10, None]}
grid_search_rf = GridSearchCV(RandomForestClassifier(random_state=42), rf_params, cv=5)
grid_search_rf.fit(X_train_scaled, y_train)
print("Best parameters for Random Forest:", grid_search_rf.best_params_)
# Best Random Forest Model after Hyperparameter Tuning
best_rf = grid_search_rf.best_estimator_
y_pred_best_rf = best_rf.predict(X_test_scaled)
print("Best Random Forest Model Accuracy:", accuracy_score(y_test, y_pred_best_rf))
# Confusion Matrix for the best Random Forest Model
print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred_best_rf))
# Visualizing the performance of models
models = ['Logistic Regression', 'SVM', 'Random Forest', 'Best Random Forest']
accuracies = [
    accuracy_score(y_test, y_pred_log_reg),
    accuracy_score(y_test, y_pred_svm),
    accuracy_score(y_test, y_pred_rf),
    accuracy_score(y_test, y_pred_best_rf)
]

plt.bar(models, accuracies, color='skyblue')
plt.xlabel('Models')
plt.ylabel('Accuracy')
plt.title('Model Performance Comparison')
plt.show()
